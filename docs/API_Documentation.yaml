openapi: "3.0.1"
info:
  title: "NITCONF RMS"
  description: "It is a system which helps program committee to decide whether to accept paper for a conference based on reviews given by reviewers. It gives us a categorized review based on different aspects of a paper."
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ROHITHMUTHAVARAPU/NITCONF/1.0.0
  - url: "http://localhost:8080"
    description: "Generated server url"
paths:
  /api/AlreadyReviewed/{id}:
    get:
      summary: Retrieves already reviewed papers by a user
      description: |
        Retrieves the list of papers already reviewed by the user identified by the provided ID.
      parameters:
        - name: id
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of papers already reviewed by the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Paper'
        '404':
          description: If the specified user does not exist or has not reviewed any papers.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags:
        - AlreadyReviewed
  /api/dashboard/{id}:
    get:
      summary: Retrieves all papers for a user
      description: |
        Retrieves all papers associated with the user identified by the provided ID.
      parameters:
        - name: id
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of papers associated with the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Paper'
        '404':
          description: If the specified user does not exist or has not reviewed any papers.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags:
        - Dashboard
  /api/editProfile/{id}:
    get:
      summary: Retrieves user profile details
      description: |
        Retrieves the profile details of the user identified by the provided ID.
      parameters:
        - name: id
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the profile details of the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: If the specified user does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags:
        - EditProfile
    post:
      summary: Updates user profile
      description: |
        Updates the profile details of the user identified by the provided ID.
      parameters:
        - name: id
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: If there is a validation error or password mismatch.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags:
        - EditProfile
  /api/needtoreview/{id}:
    get:
      summary: Retrieves papers needing review by a user
      description: |
        Retrieves the list of papers needing review by the user identified by the provided ID.
      parameters:
        - name: id
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of papers needing review by the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Paper'
        '404':
          description: If the specified user does not exist or has no papers needing review.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags:
        - NeedToReview
        
  /api/review/{id}/{username}:
    get:
      summary: Retrieves review form for a paper by a user
      description: |
        Retrieves the review form for the specified paper by the identified user.
      parameters:
        - name: id
          in: path
          description: ID of the paper.
          required: true
          schema:
            type: integer
        - name: username
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      tags:
       - ReviewPage
       
    post:
      summary: Saves review form for a paper by a user
      description: Saves the review form for the specified paper by the identified user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review form saved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
      tags:
       - ReviewPage

  /api/tagsadd/{id}:
    get:
      summary: Retrieves user tags
      description: Retrieves the tags associated with the specified user.
      parameters:
        - name: id
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the list of tags associated with the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: If the specified user does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags:
        - Tags
    post:
      summary: Add a new tag for a user
      description: Adds a new tag for the specified user.
      parameters:
        - name: id
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
      responses:
        '200':
          description: Returns the updated list of tags associated with the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: If the tag already exists for the user or other validation errors.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags:
       - Tags
       
  /api/tagsdelete/{id}:
    post:
      summary: Delete tags for a user
      description: Deletes specified tags for the user.
      parameters:
        - name: id
          in: path
          description: Email ID of the user.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: Returns the list of remaining tags associated with the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - Tags


components:
  schemas:
    
    Review:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/ReviewKey"
        TechnicalContentandAccuracy:
          type: "integer"
          format: "int32"
        SignificanceoftheWork:
          type: "integer"
          format: "int32"
        OriginalityofContent:
          type: "integer"
          format: "int32"
        AppropriateforSAC:
          type: "integer"
          format: "int32"
        organization:
          type: "integer"
          format: "int32"
        StyleandClarityofPaper:
          type: "integer"
          format: "int32"
        refeersConfidence:
          type: "integer"
          format: "int32"
        overall:
          type: "integer"
          format: "int32"
        comment:
          type: "string"
        ConfidentailComment:
          type: "string"
       
    ReviewKey:
      type: "object"
      
    Tokens:
      type: "object"
      properties:
        token:
          type: "string"
        id:
          type: "integer"
          format: "int64"
        Expiredtime:
          type: "string"
      
    Tags:
      type: "object"
      properties:
        name:
          type: "string"
        id:
          type: "integer"
          format: "int64"
    User:
      type: "object"
      properties:
        EmailId:
          type: "string"
        password:
          type: "string"
        FirstName:
          type: "string"
        LastName:
          type: "string"
        Number:
          type: "string"
        tags:
          type: "array"
          items:
            $ref: "#/components/schemas/Tags"
        accountNonExpired:
          type: "boolean"
        accountNonLocked:
          type: "boolean"
        credentialsNonExpired:
          type: "boolean"
    Paper:
      type: "object"
      properties:
        pid:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        authors:
          type: "string"
        dateallocated:
          type: "string"
        deadlinedate:
          type: "string"
        paperlink:
          type: "string"
        Reviews:
          type: "array"
          items:
            $ref: "#/components/schemas/Tags"
